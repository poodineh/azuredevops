### Azure Python Function Release: Build, Test + Integration Test, and Azure Function Deployment Template ###

# This template is used for deploying (releasing) Azure Python Functions using YAML. The same template can be used for all environments. Using the artifacts, this template deploys the azure function and if requested, runs integration tests (this is usually in QA only).  It takes the following input parameters:

#   EnvironmentName: name of environment
#   AgentPoolName: Windows Agent pool name 
#   LinuxAgentPoolName: Linux Agent pool name 
#   BuildConfiguration: build or release
#   DeploymentType: type of deployment - e.g. functionAppLinux. If we were deploying multiple things, we could pass in different values and apply logic to this value in the future.
#   functionAppName: name of function app - e.g. flight-aagops
#   functionAppFullName: name of function app including environment and location - e.g. flight-aagops-qa-func-westus2
#   azureSubscription: name of subscription - e.g. flight-qa-group-SPN
#   resourceGroupName: name of resource group - e.g. flight-qa-group
#   location: Azure location to deploy to - e.g. West US 2
#   boolRunIntegrationTests: true or false - run integration tests - usually QA only

###
###  ASSUMPTIONS:
###   folderpaths end in /
###

parameters:
  ### Deployment Parameters
  EnvironmentName: ''
  AgentPoolName: ''
  LinuxAgentPoolName: ''
  BuildConfiguration: ''
  DeploymentType: ''
  functionAppName: ''
  functionAppFullName: ''
  azureSubscription: ''
  resourceGroupName: ''
  location: ''
  boolRunIntegrationTests: ''


jobs:
  # Prep job
  - job: Prep
    pool:
      name: ${{ parameters.AgentPoolName }}  # Valid Values: 'OnPremAgents' - Hosted:'Hosted VS2017',  'Hosted macOS', 'Hosted Ubuntu 1604'
    displayName: 'Print BuildAndPublish Parameters'
    steps:
    # Print Params
    - powershell: |  
        Write-Host "Build Parameters:"
        Write-Host "EnvironmentName - ${{ parameters.EnvironmentName}}"
        Write-Host "AgentPoolName - ${{ parameters.AgentPoolName}}"
        Write-Host "LinuxAgentPoolName - ${{ parameters.LinuxAgentPoolName}}"
        Write-Host "BuildConfiguration - ${{ parameters.BuildConfiguration}}"
        Write-Host "DeploymentType - ${{ parameters.DeploymentType}}"
        Write-Host "functionAppName - ${{ parameters.functionAppName }}"
        Write-Host "functionAppFullName - ${{ parameters.functionAppFullName }}"
        Write-Host "azureSubscription - ${{ parameters.azureSubscription}}"
        Write-Host "resourceGroupName - ${{ parameters.resourceGroupName}}"
        Write-Host "location - ${{ parameters.location}}"
        Write-Host "boolRunIntegrationTests - ${{ parameters.boolRunIntegrationTests}}"
      displayName: 'Print BuildAndPublish Parameters'
    
  # Deploy application job
  # Need separate deployment step because this uses a different agent (linux)
  - deployment: FunctionAppDeploymentTo${{ parameters.EnvironmentName }} 
    pool:
        name: ${{ parameters.LinuxAgentPoolName }}  # Valid Values: 'OnPremAgents' - Hosted:'Hosted VS2017',  'Hosted macOS', 'Hosted Ubuntu 1604'
    variables:
      BuildConfiguration: '${{ parameters.BuildConfiguration }}'
    displayName: Azure Application Deployment
    environment:  ${{ parameters.EnvironmentName }} 
    dependsOn: 
    - ResourceDeploymentTo${{ parameters.EnvironmentName }} 

    strategy:
      runOnce:
        deploy:
          steps:
          # Show pipeline artifact folders
          - script: ls $(Pipeline.Workspace)
            displayName: 'Shows all pipeline artifacts'
          
          # Deploy the application with function(s)
          - task: AzureFunctionApp@1
            displayName: 'Deploy Azure Function App'
            inputs:
              azureSubscription: '${{ parameters.azureSubscription }}'
              resourceGroupName: '${{ parameters.resourceGroupName }}'
              ### Web application Azure App Service Type
              ${{ if eq(parameters.DeploymentType, 'WebAppService') }}:
                appType: webApp
              ${{ if eq(parameters.DeploymentType, 'FunctionAppService') }}:
                appType: functionApp
              ${{ if eq(parameters.DeploymentType, 'functionAppLinux') }}:
                appType: functionAppLinux
              ${{ if eq(parameters.DeploymentType, 'ContainerAppService') }}:
                appType: webAppContainer
              appName: '${{ parameters.functionAppFullName }}'
              package: '$(Pipeline.Workspace)/drop/${{ parameters.functionAppName}}.zip'

          ## Run only if running integration tests
          - ${{ if eq(parameters.boolRunIntegrationTests, 'true') }}:
            - task: UsePythonVersion@0
              displayName: "Use python version to 3.6 as required by functions"
              inputs:
                versionSpec: '3.6'
                architecture: 'x64'

            # Run Integration Tests
            - script: |
                cd  $(Pipeline.Workspace)/${{ parameters.functionAppName}}-integration-test
                python3.6 -m venv worker_venv
                source worker_venv/bin/activate
                pip3.6 install setuptools
                pip3.6 install -r requirements.txt
                python -m unittest discover -v tests -p "*_test.py"
              displayName: "Run Integration Tests"
              